name: Java CI with Gradle

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  # 소스코드의 테스트를 진행하는 Job
  test:
    runs-on: ubuntu-latest
    steps:
      # 소스코드 가져오기
      - uses: actions/checkout@v4
      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
      # Action에 전달할 인자
        with:
          java-version: '17'
          distribution: 'temurin'
      # gradlew 실행 권한 부여
      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew
      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0
      # Gradle Wrapper로 테스트 진행
      - name: Test with Gradle Wrapper
        run: ./gradlew test
  # 서로 다른 Job은 서로 다른 컴퓨터에서 실행한다고 가정하고 작성해주자.
  boot-jar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      # gradlew 실행 권한 부여
      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0
      # Gradle Wrapper로 JAR 파일 생성
      - name: Create Boot JAR with Gradle Wrapper
        run: ./gradlew bootJar
      # JAR 파일을 Artifact로 업로드
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        # 어떤 파일을 업로드 할건지
        with:
          name: artifact
          path: build/libs/*.jar
